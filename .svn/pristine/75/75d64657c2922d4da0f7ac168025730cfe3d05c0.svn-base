package com.hmkj.taozhifu.fragment;

import android.content.Intent;
import android.os.Bundle;
import android.support.v4.widget.SwipeRefreshLayout;
import android.support.v7.widget.DefaultItemAnimator;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import com.chad.library.adapter.base.BaseQuickAdapter;
import com.hmkj.taozhifu.R;
import com.hmkj.taozhifu.activity.PayActivity;
import com.hmkj.taozhifu.activity.PaySuccessActivity;
import com.hmkj.taozhifu.adapter.MyOrderAdapter;
import com.hmkj.taozhifu.base.BaseFragment;
import com.hmkj.taozhifu.bean.EventBusEntity;
import com.hmkj.taozhifu.bean.MyOrderBean;
import com.hmkj.taozhifu.http.CustomCallback;
import com.hmkj.taozhifu.http.HttpConfig;
import com.hmkj.taozhifu.myInterface.CommonStatu;
import com.hmkj.taozhifu.ui.SpacesItemDecoration;
import com.hmkj.taozhifu.utils.AppUtils;
import com.hmkj.taozhifu.utils.CommonUtil;
import com.hmkj.taozhifu.utils.GsonUtil;
import com.hmkj.taozhifu.utils.LogUtil;
import com.hmkj.taozhifu.utils.MD5Builder;
import com.hmkj.taozhifu.utils.ToastUtil;
import com.hmkj.taozhifu.view.CustomLoadMoreView;
import com.hmkj.taozhifu.view.PopupPayInputPwd;
import com.lzy.okgo.OkGo;
import com.lzy.okgo.model.Response;

import org.greenrobot.eventbus.EventBus;
import org.greenrobot.eventbus.Subscribe;
import org.greenrobot.eventbus.ThreadMode;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;

import butterknife.BindView;
import butterknife.ButterKnife;

/**
 * Created by Administrator on 2017/8/16.
 */

public class MyOrderFragment extends BaseFragment implements SwipeRefreshLayout.OnRefreshListener, BaseQuickAdapter.RequestLoadMoreListener, MyOrderAdapter.OnClickListener {
    @BindView(R.id.recyclerView)
    RecyclerView recyclerView;
    @BindView(R.id.refreshLayout)
    SwipeRefreshLayout refreshLayout;
    private static final int PAGE_SIZE = 20;
    private int PAGE_NUM = 1;
    private String url;
    private MyOrderAdapter myOrderAdapter;
    private MyOrderBean myOrderBean;
    ArrayList<MyOrderBean.OrderListBean.RecordsBean> dataBean = new ArrayList<>();
    private PopupPayInputPwd popupPayInputPwd;

    public static MyOrderFragment newInstance() {
        return new MyOrderFragment();
    }

    @Override
    protected View initView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_custom, container, false);
        ButterKnife.bind(this, view);
        EventBus.getDefault().register(this);
        init();
        return view;
    }

    //懒加载,不需要
    @Override
    protected void initData() {

    }

    //当每次用户可见时 刷新
    @Override
    protected void refreshOnVisible() {
//        initData();
        LogUtil.LogLong("Title -- " + getTitle());
        setRefreshing(true);
        onRefresh();
    }

    private void init() {
        recyclerView.setItemAnimator(new DefaultItemAnimator());
        recyclerView.setLayoutManager(new LinearLayoutManager(context));
        recyclerView.addItemDecoration(new SpacesItemDecoration(CommonUtil.getDimens(R.dimen.dp10), 3));
        myOrderAdapter = new MyOrderAdapter(null, context, this);
        myOrderAdapter.openLoadAnimation(BaseQuickAdapter.ALPHAIN);
        myOrderAdapter.isFirstOnly(false);
        myOrderAdapter.bindToRecyclerView(recyclerView);
        myOrderAdapter.disableLoadMoreIfNotFullPage();
        myOrderAdapter.setEmptyView(R.layout.item_empty_view);//必须先调用bindToRecyclerView(recyclerView);请求数据前会显示，不怎么好用
        myOrderAdapter.setLoadMoreView(new CustomLoadMoreView());
        recyclerView.setAdapter(myOrderAdapter);
        refreshLayout.setOnRefreshListener(this);
        myOrderAdapter.setOnLoadMoreListener(this, recyclerView);
    }

    /**
     * 下拉刷新
     */
    @Override
    public void onRefresh() {
        if (!myOrderAdapter.isLoadMoreEnable()) myOrderAdapter.setEnableLoadMore(true);
        if (myOrderAdapter.isLoading()) myOrderAdapter.loadMoreComplete();
        dataBean.clear();
        myOrderAdapter.notifyDataSetChanged();
        loadData(PAGE_NUM = 1);
    }

    private void loadData(final int pageNum) {
        LogUtil.LogLong("pageNum -- " + pageNum);
        OkGo.<String>get(String.format(HttpConfig.selectPayOrderByMemberId, getMemberId()))//
                .params("memberId", getMemberId())
                .params("pageNum", pageNum)
                .params("pageSize", PAGE_SIZE)
//                .cacheKey("TabFragment_" + fragmentTitle)       //由于该fragment会被复用,必须保证key唯一,否则数据会发生覆盖
//                .cacheMode(CacheMode.FIRST_CACHE_THEN_REQUEST)  //缓存模式先使用缓存,然后使用网络数据
                .execute(new CustomCallback(context) {
                    @Override
                    public void onSuccess(Response<String> response) {
                        super.onSuccess(response);
                        LogUtil.LogLong("订单 -- " + response.body());
                        if (myOrderAdapter.isLoading()) myOrderAdapter.loadMoreComplete();
                        if (checkHttpCode(response.body())) {
                            myOrderBean = GsonUtil.GsonToBean(response.body(), MyOrderBean.class);
                            if (myOrderBean != null && myOrderBean.orderList != null && myOrderBean.orderList.records != null) {
                                if (myOrderBean.orderList.records.size() > 0) {
                                    if (TextUtils.equals("全部", getTitle()))
                                        dataBean.addAll(getArrayList(myOrderBean.orderList.records, 0));
                                    if (TextUtils.equals("待付款", getTitle()))
                                        dataBean.addAll(getArrayList(myOrderBean.orderList.records, 1));
                                    if (TextUtils.equals("待使用", getTitle()))
                                        dataBean.addAll(getArrayList(myOrderBean.orderList.records, 2));
                                    if (TextUtils.equals("待评价", getTitle()))
                                        dataBean.addAll(getArrayList(myOrderBean.orderList.records, 3));
                                    if (pageNum == 1) myOrderAdapter.setNewData(dataBean);
                                    else myOrderAdapter.setNewData(dataBean);
                                } else {
                                    myOrderAdapter.setFooterView(inflater.inflate(R.layout.item_no_data, (ViewGroup) recyclerView.getParent(), false));
                                    myOrderAdapter.setEnableLoadMore(false);
                                }
                            }
                        } else ToastUtil.showToast(getHttpMsg(response.body()));
                    }

                    @Override
                    public void onError(Response<String> response) {
                        super.onError(response);
                        ToastUtil.showToast(getHttpMsg(response.body()));
                        if (myOrderAdapter.isLoading()) myOrderAdapter.loadMoreFail();
                    }

                    @Override
                    public void onFinish() {
                        super.onFinish();
                        //最后调用结束刷新的方法
                        if (refreshLayout.isRefreshing())
                            setRefreshing(false);
                    }
                });
    }

    private List<MyOrderBean.OrderListBean.RecordsBean> getArrayList(List<MyOrderBean.OrderListBean.RecordsBean> records, int statu) {
        List<MyOrderBean.OrderListBean.RecordsBean> recordsBean = new ArrayList<>();
        switch (statu) {
            case 0:
                //过滤一下取消和删除状态的
                for (MyOrderBean.OrderListBean.RecordsBean record : records) {
                    if (record.orderStatus != 5 && record.orderStatus != 6)
                        recordsBean.add(record);
                }
                break;
            case 1:
                for (MyOrderBean.OrderListBean.RecordsBean record : records) {
                    if (record.orderStatus == 1)
                        recordsBean.add(record);
                }
                break;
            case 2:
                for (MyOrderBean.OrderListBean.RecordsBean record : records) {
                    if (record.orderStatus == 2 && AppUtils.checkId(record.orderCode))
                        recordsBean.add(record);
                }
                break;
            case 3:
                for (MyOrderBean.OrderListBean.RecordsBean record : records) {
                    if (record.orderStatus == 3)
                        recordsBean.add(record);
                }
                break;
            default:
                break;
        }
        return recordsBean;
    }

    /**
     * 上拉加载
     */
    @Override
    public void onLoadMoreRequested() {
        if (refreshLayout.isRefreshing()) setRefreshing(false);
        loadData(PAGE_NUM = PAGE_NUM + 1);
    }

    public void setRefreshing(final boolean refreshing) {
        refreshLayout.post(new Runnable() {
            @Override
            public void run() {
                refreshLayout.setRefreshing(refreshing);
            }
        });
    }

    @Override
    public void onButtonClick(MyOrderBean.OrderListBean.RecordsBean dataBean, int tag) {
        //1-去支付  2-删除  3-评价
        switch (tag) {
            case 1:
                if (dataBean.cashCoupon == 0) {
                    //商铺 -- 跳支付界面
                    Intent intent = new Intent(context, PayActivity.class);
                    intent.putExtra("order_type", "order_type");
                    Bundle bundle = new Bundle();
                    bundle.putSerializable("dataBean", dataBean);
                    intent.putExtras(bundle);
                    startActivity(intent);
                } else {
                    //商品 -- 抵用券
                    payOrder(dataBean);
                }
                break;
            case 2:
                //删除
                deleteOrder(dataBean, 6);
                break;
            case 3:
                ToastUtil.showToast("待开发");
                break;
            case 4:
                //取消
                deleteOrder(dataBean, 5);
                break;
        }
    }

    private void payOrder(MyOrderBean.OrderListBean.RecordsBean dataBean) {
        payInputPwd(dataBean);
    }

    private void payInputPwd(final MyOrderBean.OrderListBean.RecordsBean dataBean) {
        popupPayInputPwd = new PopupPayInputPwd(context, 0, null, new PopupPayInputPwd.OnSendListener() {
            @Override
            public void onSuccess(String str) {
                pay(dataBean, str);
            }

            @Override
            public void onCancelClick() {
                popupPayInputPwd.dismiss();
            }
        });
        popupPayInputPwd.show();
    }

    //抵用券支付
    private void pay(final MyOrderBean.OrderListBean.RecordsBean dataBean, String str) {
        String pass = null;
        try {
            pass = MD5Builder.getMD5(str);
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        OkGo.<String>post(HttpConfig.initPay)
                .params("memberId", getMemberId())
                .params("orderNo", dataBean.orderNo)
                .params("amount", dataBean.cashCoupon)
                .params("productInfo", "APP支付")
                .params("payWay", "DJPAY")
                .params("payType", "APP")
                .params("shopId", dataBean.shopId)
                .params("pass", pass)
                .execute(new CustomCallback(context) {
                    @Override
                    public void onSuccess(Response<String> response) {
                        super.onSuccess(response);
                        LogUtil.LogLong("支付返回 -- " + response.body());
                        if (checkHttpCode(response.body())) {
                            onComplete(dataBean);
                        } else {
                            ToastUtil.showToast(getHttpMsg(response.body()));
                        }
                    }
                });
    }

    private void onComplete(final MyOrderBean.OrderListBean.RecordsBean dataBean) {
        Intent intent = new Intent(context, PaySuccessActivity.class);
        intent.putExtra("type", "commodity");
        intent.putExtra("price", String.valueOf(dataBean.cashCoupon));
        intent.putExtra("shopName", dataBean.shopName);
        intent.putExtra("orderNo", dataBean.orderNo);
        intent.putExtra("createTime", dataBean.createTime);
        startActivity(intent);
        popupPayInputPwd.dismiss();
    }

    @Subscribe(threadMode = ThreadMode.MAIN)
    public void onMessageEvent(EventBusEntity event) {
        switch (event.getMsg()) {
            case CommonStatu.OK:
                dataBean.clear();
                loadData(PAGE_NUM = 1);
                break;
        }
    }

    private void deleteOrder(final MyOrderBean.OrderListBean.RecordsBean dataBean, int orderStatus) {
        OkGo.<String>post(String.format(HttpConfig.updateOrderByOrdesState, dataBean.orderId))
                .params("memberId", getMemberId())
                .params("orderId", dataBean.orderId)
                .params("orderStatus", orderStatus)
                .execute(new CustomCallback(context) {
                    @Override
                    public void onSuccess(Response<String> response) {
                        super.onSuccess(response);
                        LogUtil.LogLong("删除订单 -- " + response.body());
                        if (checkHttpCode(response.body())) {
                            MyOrderFragment.this.dataBean.remove(dataBean);
                            myOrderAdapter.notifyDataSetChanged();
                        } else {
                            ToastUtil.showToast(getHttpMsg(response.body()));
                        }
                    }
                });
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        EventBus.getDefault().unregister(this);
    }
}
